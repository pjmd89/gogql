package introspection

type DirectiveLocation int

const (
	DIRECTIVE_LOCATION_ERROR 					DirectiveLocation = iota
	DIRECTIVE_LOCATION_QUERY
	DIRECTIVE_LOCATION_MUTATION
	DIRECTIVE_LOCATION_SUBSCRIPTION
	DIRECTIVE_LOCATION_FIELD
	DIRECTIVE_LOCATION_FRAGMENT_DEFINITION
	DIRECTIVE_LOCATION_FRAGMENT_SPREAD
	DIRECTIVE_LOCATION_INLINE_FRAGMENT
	DIRECTIVE_LOCATION_SCHEMA
	DIRECTIVE_LOCATION_SCALAR
	DIRECTIVE_LOCATION_OBJECT
	DIRECTIVE_LOCATION_FIELD_DEFINITION
	DIRECTIVE_LOCATION_ARGUMENT_DEFINITION
	DIRECTIVE_LOCATION_INTERFACE
	DIRECTIVE_LOCATION_UNION
	DIRECTIVE_LOCATION_ENUM
	DIRECTIVE_LOCATION_ENUM_VALUE
	DIRECTIVE_LOCATION_INPUT_OBJECT
	DIRECTIVE_LOCATION_INPUT_FIELD_DEFINITION
)
func SetDirectiveLocation(typekind string) *DirectiveLocation {
	var tk DirectiveLocation;
	
	switch typekind {
		case "QUERY":
			tk = DIRECTIVE_LOCATION_QUERY;
			break;
		case "MUTATION":
			tk = DIRECTIVE_LOCATION_MUTATION;
			break;
		case "SUBSCRIPTION":
			tk = DIRECTIVE_LOCATION_SUBSCRIPTION;
			break;
		case "FIELD":
			tk = DIRECTIVE_LOCATION_FIELD;
			break;
		case "FRAGMENT_DEFINITION":
			tk = DIRECTIVE_LOCATION_FRAGMENT_DEFINITION;
			break;
		case "FRAGMENT_SPREAD":
			tk = DIRECTIVE_LOCATION_FRAGMENT_SPREAD;
			break;
		case "INLINE_FRAGMENT":
			tk = DIRECTIVE_LOCATION_INLINE_FRAGMENT;
			break;
		case "SCHEMA":
			tk = DIRECTIVE_LOCATION_SCHEMA;
			break;
		case "SCALAR":
			tk = DIRECTIVE_LOCATION_SCALAR;
			break;
		case "OBJECT":
			tk = DIRECTIVE_LOCATION_OBJECT;
			break;
		case "FIELD_DEFINITION":
			tk = DIRECTIVE_LOCATION_FIELD_DEFINITION;
			break;
		case "ARGUMENT_DEFINITION":
			tk = DIRECTIVE_LOCATION_ARGUMENT_DEFINITION;
			break;
		case "INTERFACE":
			tk = DIRECTIVE_LOCATION_INTERFACE;
			break;
		case "UNION":
			tk = DIRECTIVE_LOCATION_UNION;
			break;
		case "ENUM":
			tk = DIRECTIVE_LOCATION_ENUM;
			break;
		case "ENUM_VALUE":
			tk = DIRECTIVE_LOCATION_ENUM_VALUE;
			break;
		case "INPUT_OBJECT":
			tk = DIRECTIVE_LOCATION_INPUT_OBJECT;
			break;
		case "INPUT_FIELD_DEFINITION":
			tk = DIRECTIVE_LOCATION_INPUT_FIELD_DEFINITION;
			break;
		default:
			tk = DIRECTIVE_LOCATION_ERROR;
	}
	return &tk;
}

func(o DirectiveLocation) String() string{
	return [...]string{
		"ERROR",
		"QUERY",
		"MUTATION",
		"SUBSCRIPTION",
		"FIELD",
		"FRAGMENT_DEFINITION",
		"FRAGMENT_SPREAD",
		"INLINE_FRAGMENT",
		"SCHEMA",
		"SCALAR",
		"OBJECT",
		"FIELD_DEFINITION",
		"ARGUMENT_DEFINITION",
		"INTERFACE",
		"UNION",
		"ENUM",
		"ENUM_VALUE",
		"INPUT_OBJECT",
		"INPUT_FIELD_DEFINITION",
	}[o];
}
func(o DirectiveLocation) Is(value string) bool {
	return o.String() == value;
}
func (o DirectiveLocation) EnumIndex() int {
	return int(o)
}