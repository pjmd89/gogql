/*
 * Generado por gqlgenerate.
 *
 * Este archivo puede contener errores, de ser asi, coloca el issue en el repositorio de github
 * https://github.com/pjmd89/gogql
 * 
 * Estos arvhivos corren riesgo de sobreescritura, por ese motivo gqlgnerate crea una carpeta llamada generate, asi que,
 * copia todas las carpetas que estan dentro de la carpeta generate y pegalas en la carpeta raiz de tu proyecto.
 * 
 * gqlgenerate no creara archivos en la carpeta raiz de tu modulo porque puedes sufrir perdida de informacion.
 */
package main

import (
    {{- range .ObjectType}}
    "{{.DefinitionPath}}"
    {{- end}}
	{{- if .IsScalar }}
	"{{.ScalarPath}}"
	{{- end }}
	"embed"
	"{{.ModuleName}}/lib"
	"github.com/pjmd89/gogql/lib/gql"
	"github.com/pjmd89/gogql/lib/http"
	"github.com/pjmd89/gogql/lib/rest"
	"github.com/pjmd89/gogql/lib/gql/definitionError"
	"github.com/pjmd89/goutils/systemutils"
	"github.com/pjmd89/goutils/systemutils/debugmode"
	"github.com/pjmd89/mongomodel/mongomodel"
)
var (
	//go:embed "{{.SchemaPath}}"
	embedFS        embed.FS
)

var myConfig = lib.Config()
var systemLog = systemutils.NewLog(myConfig.SystemLog)
var accessLog = systemutils.NewLog(myConfig.AccessLog)
var logs = systemutils.Logs{System: systemLog, Access: accessLog}
var db = mongomodel.NewConn(&myConfig.DBConfigFile)
var schema = gql.Init(embedFS, "schema")

var restfull = rest.Init()
var myHttp = http.Init(logs, myConfig.HTTPConfigFile).SetGql(schema).SetRest(restfull)

func main() {
	lib.MyConfig = myConfig
	lib.Logs = logs
	systemLog.Info().Println("debugmode: ", debugmode.Enabled)
	myHttp.Start()
}
func OnDB(currentDB string, currentCollection string) (r string) {
	r = currentDB
	return
}
func httpOnSession() (r interface{}) {
	return
}
func httpCheckOrigin(url http.URL) (r bool, info interface{}) {
    r = true
	return
}
func httpOnBegin(url http.URL, httpPath *http.Path, originData interface{}) (r bool) {
	return true
}
func httpOnFinish() {}
func OnIntrospection() (err definitionError.GQLError) {
	return
}
func OnAuthorizate(authInfo AuthorizateInfo) (err definitionError.GQLError) {
	//El el rol puede venir de una variable de sesion
	//La sesion debes definirla de manera que se adapte a tu necesidad
	/*
		if len(lib.Auth[authInfo.SrcType]) > 0 &&
			len(lib.Auth[authInfo.SrcType][authInfo.DstType]) > 0 &&
			len(lib.Auth[authInfo.SrcType][authInfo.DstType][authInfo.Resolver]) > 0 {

			if !slices.Contains(lib.Auth[authInfo.SrcType][authInfo.DstType][authInfo.Resolver], "yourRol") {
				err = definitionError.NewFatal("este rol no tiene permisos.", nil)
			}
		}
	*/
	return
}
func init(){
    db.(*mongomodel.MongoDBConn).OnDatabase = OnDB
    myHttp.OnSession = httpOnSession
	myHttp.CheckOrigin = httpCheckOrigin
	myHttp.OnBegin = httpOnBegin
	myHttp.OnFinish = httpOnFinish
	schema.OnIntrospection = OnIntrospection
	schema.OnAuthenticate = OnAuthenticate
    
    {{- range .ObjectType}}
    schema.ObjectType("{{.RealName}}", {{.PackageName}}.New{{.Name}}(db))
    {{- end}}
	
	{{- range .ScalarType}}
	schema.Scalar("{{.Name}}", scalars.New{{.Name}}Scalar())
	{{- end}}
}
