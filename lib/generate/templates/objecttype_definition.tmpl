/*
 * Generado por gqlgenerate.
 *
 * Este archivo puede contener errores, de ser asi, coloca el issue en el repositorio de github
 * https://github.com/pjmd89/gogql
 * 
 * Estos arvhivos corren riesgo de sobreescritura, por ese motivo gqlgnerate crea una carpeta llamada generate, asi que,
 * copia todas las carpetas que estan dentro de la carpeta generate y pegalas en la carpeta raiz de tu proyecto.
 * 
 * gqlgenerate no creara archivos en la carpeta raiz de tu modulo porque puedes sufrir perdida de informacion.
 */
package {{.PackageName}}

import (
	"github.com/pjmd89/gogql/lib/gql/definitionError"
	"github.com/pjmd89/gogql/lib/gql/resolvers"
	"{{.ModuleName}}/{{.ModelPath}}"
	"github.com/pjmd89/goutils/dbutils"
)

type {{.Name}} struct {
	model {{.ModelPath}}.{{.Name}}
}

func New{{.Name}}(db dbutils.DBInterface) (o resolvers.ObjectTypeInterface) {
	o = &{{.Name}}{
		model: {{.ModelPath}}.{{.Name}}{},
	}
	o.(*{{.Name}}).model.Init({{.ModelPath}}.{{.Name}}{}, db)
	return o
}
func (o *{{.Name}}) Resolver(info resolvers.ResolverInfo) (r resolvers.DataReturn, err definitionError.GQLError) {
	switch info.Operation {
	case "query":
		{{- if .HasQueries}}
		switch info.Resolver {
		{{- range $key, $value := .QueryResolvers}}
		case "{{.}}":
			r, err = o.{{.}}(info)
			break
		{{- end}}
		}
		{{- end}}
		break
	case "mutation":
		{{- if .HasMutations}}
		switch info.Resolver {
		{{- range $key, $value := .MutationResolvers}}
		case "{{.}}":
			r, err = o.{{.}}(info)
			break
		{{- end}}
		}
		break
		{{- end}}
	}
	return
}
func (o *{{.Name}}) Subscribe(info resolvers.ResolverInfo) (r bool) {
	{{- if .HasSubscriptions}}
	switch info.Resolver {
	{{- range $key, $value := .SubscriptionResolvers}}
	case "{{.}}":
		r= o.{{.}}(info)
		break
	{{- end}}
	}
	{{- end}}
	return
}
